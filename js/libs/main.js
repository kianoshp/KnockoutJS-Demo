// Generated by CoffeeScript 1.3.3

/*
Flickr API Key 8d9583006d90062b6c64640bcfccb69c
Secret f8366434247ac7c1
*/


(function() {
  var Favorites, Photo, flickrURL, photoViewModel;

  flickrURL = 'http://api.flickr.com/services/rest/?format=json&nojsoncallback=1&method=flickr.photos.search&api_key=8d9583006d90062b6c64640bcfccb69c&per_page=25&tags=';

  Photo = function(id, owner, title, farmId, serverId, secret, ispublic, isfriend, isfamily) {
    this.id = id;
    this.owner = owner;
    this.title = title;
    this.farmId = farmId;
    this.serverId = serverId;
    this.secret = secret;
    this.ispublic = ispublic;
    this.isfriend = isfriend;
    this.isfamily = isfamily;
  };

  Favorites = function(Photo) {
    return this.Photo = Photo;
  };

  photoViewModel = {
    photos: ko.observableArray([]),
    favorites: ko.observableArray([]),
    getPhotos: function(formElement) {
      var searchTag, that;
      console.log("getting photos with tags --> " + $(formElement).find('#search').val());
      photoViewModel.photos([]);
      searchTag = $(formElement).find('#search').val();
      that = this;
      $.getJSON(flickrURL + searchTag).done(function(photoData) {
        console.log("I got the data");
        return _.each(photoData.photos.photo, function(photo) {
          var image;
          image = {
            photoObj: new Photo(photo.id, photo.owner, photo.title, photo.farm, photo.server, photo.secret, photo.ispublic, photo.isfriend, photo.isfamily),
            photoSrc: that.createSrc(photo.farm, photo.server, photo.id, photo.secret, 'thumbnail')
          };
          return that.photos.push(image);
        });
      });
    },
    createSrc: function(farmId, serverId, id, secret, size) {
      return 'http://farm' + farmId + '.staticflickr.com/' + serverId + '/' + id + '_' + secret + (size === "thumbnail" ? "_s.jpg" : "_n.jpg");
    },
    addToFavorites: function(id) {
      var currentPhotoObj, favoriteExists;
      currentPhotoObj = _.find(photoViewModel.photos(), function(photo) {
        return photo.photoObj['id'] === id;
      });
      favoriteExists = _.find(photoViewModel.favorites(), function(favorite) {
        return favorite.photoObj['id'] === currentPhotoObj.photoObj.id;
      });
      if (!favoriteExists) {
        photoViewModel.favorites.push(currentPhotoObj);
      }
    },
    removeFromFavorites: function(id) {
      return photoViewModel.favorites.splice(_.indexOf(photoViewModel.favorites(), _.find(photoViewModel.favorites(), function(favorite) {
        return favorite.photoObj['id'] === id;
      })), 1);
    },
    showLargerImage: function(id) {
      var currentPhotoObj, imageSrc;
      currentPhotoObj = _.find(photoViewModel.photos(), function(photo) {
        return photo.photoObj['id'] === id;
      });
      imageSrc = photoViewModel.createSrc(currentPhotoObj.photoObj.farmId, currentPhotoObj.photoObj.serverId, currentPhotoObj.photoObj.id, currentPhotoObj.photoObj.secret, 'large');
      $('body').modal({
        height: 'auto',
        width: 'auto',
        loaderImgSrc: 'img/loader.gif',
        showSpinner: false
      });
      $('body').modal('openModal');
      return $('body').modal('updateContent', $('<img/>').attr('src', imageSrc));
    }
  };

  ko.applyBindings(photoViewModel);

}).call(this);
